{%- set appname = appname or server_name|split('.')|first -%}

# Tell nginx that there are external servers called @{{appname}} living at our socket
upstream {{appname}} {
  {% for i in range(1,workers+1) %}
  server unix:{{application_dir}}/app{{i}}.sock fail_timeout=0;
  {%- endfor %}
  # backend servers must generate unique sticky cookie;
  hash $cookie_sticky consistent; 
}

server {

  listen 80;
  listen [::]:80;

  client_max_body_size 100M;

  # Application root
  root {{application_dir}}{{module}}/static;

  access_log /var/log/nginx/{{server_name}}-access.log{% if log_format is defined %} {{log_format}}{% endif %};

  server_name {{server_name}};

  error_page 404 /404.html

  location = /404.html {
    root {{application_dir}}/{{module}}/static;
    internal;
  }
  location ~ ^/(robots\.txt|crossdomain\.xml|favicon\.ico|browserconfig\.xml|humans\.txt|\.well-known/.*)$ {
    root {{application_dir}}/{{module}}/static;
    expires off;
    access_log off;
  }

  # assumes static_assets={'/static': '{{module}}/static'}
  location /static {
    root {{application_dir}}/{{module}};
    expires off;
    access_log off;
    location ~ \.svgz$ { add_header Content-Encoding gzip; }
  }

  # Set some configuration options on requests forwarded to @app
  location / {
    proxy_pass http://{{appname}};
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_read_timeout 86400;
  }
}

